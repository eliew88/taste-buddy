generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * Email Visibility Settings
 */
enum EmailVisibility {
  HIDDEN          // Email not visible to anyone
  FOLLOWING_ONLY  // Email visible only to users this person follows
  PUBLIC          // Email visible to everyone
}

/**
 * User Model - Production Version
 */
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // === PROFILE CONTENT ===
  bio String? // User biography/description
  
  // === SOCIAL LINKS ===
  instagramUrl String? // Instagram profile URL
  websiteUrl   String? // Personal website URL
  
  // === PRIVACY SETTINGS ===
  emailVisibility EmailVisibility @default(HIDDEN) // Control who can see email
  
  // === NOTIFICATION PREFERENCES ===
  notifyOnNewFollower Boolean @default(true) // Notify when someone follows you
  notifyOnRecipeComment Boolean @default(true) // Notify when someone comments on your recipe
  notifyOnCompliment Boolean @default(true) // Notify when someone sends you a compliment/tip
  notifyOnNewRecipeFromFollowing Boolean @default(true) // Notify when someone you follow posts a new recipe
  
  // === EMAIL NOTIFICATION PREFERENCES ===
  emailNotifications Boolean @default(false) // Whether to send email notifications
  emailDigest Boolean @default(false) // Whether to send daily/weekly email digest
  
  // === RELATIONSHIPS ===
  recipes             Recipe[]
  favorites           Favorite[]
  ratings             Rating[]
  comments            Comment[]
  complimentsGiven    Compliment[] @relation("ComplimentsGiven")
  complimentsReceived Compliment[] @relation("ComplimentsReceived")
  
  // Following relationships
  following Follow[] @relation("UserFollowing")
  followers Follow[] @relation("UserFollowers")
  
  // Notification relationships
  notificationsReceived Notification[] @relation("NotificationsReceived")
  notificationsSent Notification[] @relation("NotificationsSent")
  
  // Payment relationship
  paymentAccount PaymentAccount?
  
  // Achievement relationships
  achievements UserAchievement[]
  
  // Meal relationships
  meals Meal[]
  taggedInMeals MealTag[]
  
  // Recipe Book relationships  
  recipeBookCategories RecipeBookCategory[]
  recipeBookEntries RecipeBookEntry[]

  @@map("users")
}

/**
 * IngredientEntry Model - Structured ingredient with amount, unit, and ingredient
 */
model IngredientEntry {
  id         String @id @default(cuid())
  amount     Float? // Optional for ingredients like "pinch of salt" or "to taste"
  unit       String?
  ingredient String
  
  // === RECIPE RELATIONSHIP ===
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  // === METADATA ===
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // === INDEXES ===
  @@index([recipeId])
  @@index([ingredient])
  @@map("ingredient_entries")
}

/**
 * Recipe Model - Production Version
 */
model Recipe {
  id           String            @id @default(cuid())
  title        String
  description  String?
  // Structured ingredients instead of simple strings
  ingredients  IngredientEntry[]
  instructions String
  cookTime     String?
  servings     Int?
  difficulty   String            @default("easy")
  tags         String[]          @default([])
  isPublic     Boolean           @default(true) // Public by default for backward compatibility
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  authorId     String
  
  // === RELATIONSHIPS ===
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  images      RecipeImage[] // New multiple images relationship
  comments    Comment[]
  favorites   Favorite[]
  ratings     Rating[]
  compliments Compliment[]
  notifications Notification[] @relation("NotificationRecipes")
  
  // Recipe Book relationships
  recipeBookEntries RecipeBookEntry[]

  @@index([authorId])
  @@index([difficulty])
  @@index([createdAt])
  @@index([tags], type: Gin)
  @@map("recipes")
}

/**
 * RecipeImage Model - For supporting multiple images per recipe
 */
model RecipeImage {
  id String @id @default(cuid())
  
  // === IMAGE DETAILS ===
  url String // Image URL (from B2 or local storage)
  filename String? // Original filename
  caption String? // Optional caption for the image
  alt String? // Alt text for accessibility
  
  // === IMAGE METADATA ===
  width Int? // Image width in pixels
  height Int? // Image height in pixels
  fileSize Int? // File size in bytes
  
  // === ORDERING AND PRIMARY ===
  displayOrder Int @default(0) // Order for display (0 = first)
  isPrimary Boolean @default(false) // Whether this is the primary image for recipe cards
  
  // === RECIPE RELATIONSHIP ===
  recipeId String
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  // === TIMESTAMPS ===
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // === INDEXES ===
  @@index([recipeId])
  @@index([isPrimary])
  @@index([displayOrder])
  @@map("recipe_images")
}

/**
 * Favorite Model - Production Version
 */
model Favorite {
  id       String @id @default(cuid())
  userId   String
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@index([userId])
  @@index([recipeId])
  @@map("favorites")
}

/**
 * Rating Model - Production Version
 */
model Rating {
  id        String   @id @default(cuid())
  rating    Int      @default(1)
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@index([recipeId])
  @@index([rating])
  @@map("ratings")
}

/**
 * Comment Model - Production Version
 */
model Comment {
  id         String   @id @default(cuid())
  content    String
  visibility String   @default("public")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  recipeId   String
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications Notification[] @relation("NotificationComments")

  @@index([recipeId])
  @@index([userId])
  @@index([visibility])
  @@index([createdAt])
  @@map("comments")
}

/**
 * Compliment Model - Private Chef Appreciation System
 */
model Compliment {
  id String @id @default(cuid())
  
  // === COMPLIMENT TYPE ===
  type String @default("message") // "message" or "tip"
  
  // === CONTENT ===
  message String // The compliment message
  
  // === TIP DETAILS (for future payment processing) ===
  tipAmount Decimal? // Amount in dollars (e.g., 2.50)
  currency  String   @default("USD")
  
  // === PAYMENT STATUS (for future implementation) ===
  paymentStatus String    @default("pending") // "pending", "succeeded", "failed", "refunded"
  paymentId     String?   // External payment processor ID (Stripe Payment Intent)
  paymentIntentId String? // Stripe Payment Intent ID for tips
  paymentDate   DateTime?
  paidAt        DateTime? // When payment was completed
  
  // === PLATFORM FEE DETAILS ===
  platformFeeAmount Decimal? // Amount kept by platform (e.g., 0.25 for 5% of $5 tip)
  netAmount        Decimal? // Amount received by chef after fees
  
  // === PRIVACY OPTIONS ===
  isAnonymous Boolean @default(false) // Whether sender wants to remain anonymous
  
  // === TIMESTAMPS ===
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // === RELATIONSHIPS ===
  fromUserId String  // User giving the compliment
  toUserId   String  // Chef receiving the compliment  
  recipeId   String? // Optional: specific recipe that inspired the compliment
  
  fromUser User    @relation("ComplimentsGiven", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User    @relation("ComplimentsReceived", fields: [toUserId], references: [id], onDelete: Cascade)
  recipe   Recipe? @relation(fields: [recipeId], references: [id], onDelete: SetNull)
  notifications Notification[] @relation("NotificationCompliments")
  
  // === INDEXES ===
  @@index([toUserId])
  @@index([fromUserId])
  @@index([recipeId])
  @@index([type])
  @@index([paymentStatus])
  @@index([createdAt])
  @@map("compliments")
}

/**
 * Follow Model - For TasteBuddies following system
 */
model Follow {
  id          String   @id @default(cuid())
  followerId  String   // User who is following
  followingId String   // User being followed
  createdAt   DateTime @default(now())
  
  // === RELATIONSHIPS ===
  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

/**
 * PaymentAccount Model - For TasteBuddy payment processing and tipping
 */
model PaymentAccount {
  id String @id @default(cuid())
  
  // === ACCOUNT DETAILS ===
  userId String @unique
  stripeAccountId String? // Stripe Connect Express account ID
  accountStatus String @default("pending") // "pending", "active", "restricted", "inactive"
  
  // === ONBOARDING STATUS ===
  onboardingComplete Boolean @default(false)
  detailsSubmitted Boolean @default(false)
  payoutsEnabled Boolean @default(false)
  
  // === PAYMENT PREFERENCES ===
  acceptsTips Boolean @default(true)
  minimumTipAmount Decimal @default(1.00)
  
  // === PLATFORM FEE STRUCTURE ===
  platformFeePercent Decimal @default(5.00) // 5% platform fee
  
  // === TIMESTAMPS ===
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // === RELATIONSHIPS ===
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // === INDEXES ===
  @@index([userId])
  @@index([accountStatus])
  @@index([onboardingComplete])
  @@index([acceptsTips])
  @@map("payment_accounts")
}

/**
 * Notification Types Enum
 */
enum NotificationType {
  NEW_FOLLOWER        // Someone started following you
  RECIPE_COMMENT      // Someone commented on your recipe
  COMPLIMENT_RECEIVED // Someone sent you a compliment/tip
  NEW_RECIPE_FROM_FOLLOWING // Someone you follow posted a new recipe
}

/**
 * Notification Model - For in-app notifications
 */
model Notification {
  id String @id @default(cuid())
  
  // === NOTIFICATION DETAILS ===
  type NotificationType
  title String
  message String
  
  // === RECIPIENT ===
  userId String // User receiving the notification
  
  // === SENDER ===
  fromUserId String? // User who triggered the notification (optional for system notifications)
  
  // === RELATED ENTITIES ===
  relatedRecipeId String? // For recipe-related notifications
  relatedCommentId String? // For comment notifications
  relatedComplimentId String? // For compliment notifications
  relatedUserId String? // For user-related notifications (like new followers)
  
  // === STATUS ===
  read Boolean @default(false)
  
  // === TIMESTAMPS ===
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // === RELATIONSHIPS ===
  user User @relation("NotificationsReceived", fields: [userId], references: [id], onDelete: Cascade)
  fromUser User? @relation("NotificationsSent", fields: [fromUserId], references: [id], onDelete: SetNull)
  relatedRecipe Recipe? @relation("NotificationRecipes", fields: [relatedRecipeId], references: [id], onDelete: SetNull)
  relatedComment Comment? @relation("NotificationComments", fields: [relatedCommentId], references: [id], onDelete: SetNull)
  relatedCompliment Compliment? @relation("NotificationCompliments", fields: [relatedComplimentId], references: [id], onDelete: SetNull)
  
  // === INDEXES ===
  @@index([userId])
  @@index([fromUserId])
  @@index([type])
  @@index([read])
  @@index([createdAt])
  @@index([relatedRecipeId])
  @@index([relatedCommentId])
  @@index([relatedComplimentId])
  @@map("notifications")
}

/**
 * Achievement Types Enum
 */
enum AchievementType {
  RECIPE_COUNT     // Based on number of recipes posted
  MEAL_COUNT       // Based on number of meals posted
  PHOTO_COUNT      // Based on number of photos uploaded
  FAVORITES_COUNT  // Based on total favorites received
  FOLLOWERS_COUNT  // Based on number of followers
  RATINGS_COUNT    // Based on total ratings received
  COMMENTS_COUNT   // Based on total comments received
  INGREDIENTS_COUNT // Based on unique ingredients used
  STREAK          // Based on consistent posting
  SPECIAL         // Special one-time achievements
}

/**
 * Achievement Model - Defines available achievements
 */
model Achievement {
  id String @id @default(cuid())
  
  // === ACHIEVEMENT DETAILS ===
  type AchievementType
  name String // "Recipe Master", "Community Favorite", etc.
  description String // Description of how to earn this achievement
  icon String // Icon identifier (emoji or icon class)
  color String @default("#3B82F6") // Badge color
  
  // === REQUIREMENTS ===
  threshold Int? // Numeric threshold (e.g., 10 recipes, 100 favorites)
  
  // === METADATA ===
  isActive Boolean @default(true) // Whether this achievement is currently available
  createdAt DateTime @default(now())
  
  // === RELATIONSHIPS ===
  userAchievements UserAchievement[]
  
  // === INDEXES ===
  @@index([type])
  @@index([isActive])
  @@map("achievements")
}

/**
 * UserAchievement Model - Tracks which users have earned which achievements
 */
model UserAchievement {
  id String @id @default(cuid())
  
  // === USER AND ACHIEVEMENT ===
  userId String
  achievementId String
  
  // === ACHIEVEMENT DATA ===
  earnedAt DateTime @default(now())
  progress Int? // Current progress toward achievement (if applicable)
  
  // === RELATIONSHIPS ===
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  // === CONSTRAINTS ===
  @@unique([userId, achievementId]) // User can only earn each achievement once
  
  // === INDEXES ===
  @@index([userId])
  @@index([achievementId])
  @@index([earnedAt])
  @@map("user_achievements")
}

/**
 * Meal Model - Meal memories with tagging support and privacy settings
 */
model Meal {
  id          String   @id @default(cuid())
  name        String
  description String?
  date        DateTime? // Optional date when meal was made
  isPublic    Boolean  @default(true) // Whether this meal memory is public or private
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String

  // === RELATIONSHIPS ===
  author User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  images MealImage[]
  taggedUsers MealTag[] // Users tagged in this meal

  @@index([authorId])
  @@index([date])
  @@index([createdAt])
  @@index([isPublic])
  @@map("meals")
}

/**
 * MealImage Model - For supporting multiple images per meal
 */
model MealImage {
  id String @id @default(cuid())
  
  // === IMAGE DETAILS ===
  url String // Image URL (from B2 or local storage)
  filename String? // Original filename
  caption String? // Optional caption for the image
  alt String? // Alt text for accessibility
  
  // === IMAGE METADATA ===
  width Int? // Image width in pixels
  height Int? // Image height in pixels
  fileSize Int? // File size in bytes
  
  // === ORDERING AND PRIMARY ===
  displayOrder Int @default(0) // Order for display (0 = first)
  isPrimary Boolean @default(false) // Whether this is the primary image for meal cards
  
  // === MEAL RELATIONSHIP ===
  mealId String
  meal Meal @relation(fields: [mealId], references: [id], onDelete: Cascade)
  
  // === TIMESTAMPS ===
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // === INDEXES ===
  @@index([mealId])
  @@index([isPrimary])
  @@index([displayOrder])
  @@map("meal_images")
}

/**
 * MealTag Model - For tagging TasteBuddies in meal memories
 */
model MealTag {
  id String @id @default(cuid())
  
  // === MEAL AND USER ===
  mealId String
  userId String
  
  // === TAG METADATA ===
  taggedAt DateTime @default(now())
  taggedBy String // ID of the user who created the tag (usually the meal author)
  
  // === RELATIONSHIPS ===
  meal Meal @relation(fields: [mealId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // === CONSTRAINTS ===
  @@unique([mealId, userId]) // User can only be tagged once per meal
  
  // === INDEXES ===
  @@index([mealId])
  @@index([userId])
  @@index([taggedAt])
  @@map("meal_tags")
}

/**
 * RecipeBookCategory Model - User-defined categories for organizing recipes
 */
model RecipeBookCategory {
  id String @id @default(cuid())
  
  // === CATEGORY DETAILS ===
  name String // Category name (e.g., "Desserts", "Vegetarian", "Favorites")
  description String? // Optional description of the category
  color String? // Optional color for visual organization
  
  // === USER RELATIONSHIP ===
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // === TIMESTAMPS ===
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // === RELATIONSHIPS ===
  recipeBookEntries RecipeBookEntry[]
  
  // === CONSTRAINTS ===
  @@unique([userId, name]) // User cannot have duplicate category names
  
  // === INDEXES ===
  @@index([userId])
  @@index([name])
  @@index([createdAt])
  @@map("recipe_book_categories")
}

/**
 * RecipeBookEntry Model - Junction table for recipes in user's recipe book with categories
 */
model RecipeBookEntry {
  id String @id @default(cuid())
  
  // === USER AND RECIPE ===
  userId String
  recipeId String
  
  // === CATEGORY RELATIONSHIP (OPTIONAL) ===
  categoryId String?
  
  // === PERSONAL NOTES ===
  notes String? // User's personal notes about this recipe
  
  // === TIMESTAMPS ===
  addedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // === RELATIONSHIPS ===
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  category RecipeBookCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  // === CONSTRAINTS ===
  @@unique([userId, recipeId, categoryId]) // Recipe can only be in the same category once per user
  
  // === INDEXES ===
  @@index([userId])
  @@index([recipeId])
  @@index([categoryId])
  @@index([addedAt])
  @@map("recipe_book_entries")
}

