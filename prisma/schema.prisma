generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * User Model - Production Version
 */
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // === RELATIONSHIPS ===
  recipes   Recipe[]
  favorites Favorite[]
  ratings   Rating[]
  comments  Comment[]

  @@map("users")
}

/**
 * Recipe Model - Production Version
 */
model Recipe {
  id           String   @id @default(cuid())
  title        String
  description  String?
  // Keep simple string array for now
  ingredients  String[]
  instructions String
  cookTime     String?
  servings     Int?
  difficulty   String            @default("easy")
  tags         String[]          @default([])
  image        String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  authorId     String
  
  // === RELATIONSHIPS ===
  author    User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  favorites Favorite[]
  ratings   Rating[]

  @@index([authorId])
  @@index([difficulty])
  @@index([createdAt])
  @@index([tags], type: Gin)
  @@map("recipes")
}

/**
 * Favorite Model - Production Version
 */
model Favorite {
  id       String @id @default(cuid())
  userId   String
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@index([userId])
  @@index([recipeId])
  @@map("favorites")
}

/**
 * Rating Model - Production Version
 */
model Rating {
  id        String   @id @default(cuid())
  rating    Int      @default(1)
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@index([recipeId])
  @@index([rating])
  @@map("ratings")
}

/**
 * Comment Model - Production Version
 */
model Comment {
  id         String   @id @default(cuid())
  content    String
  visibility String   @default("public")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  recipeId   String
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([recipeId])
  @@index([userId])
  @@index([visibility])
  @@index([createdAt])
  @@map("comments")
}

